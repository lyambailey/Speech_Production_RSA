#!/bin/bash

# Read in whole-brain bayes maps for each model, do clustering, write results to table.
# Note that the tables generated by this script are slightly unusual for fMRI, in that they report
# center of gravity (COG) coordinates for each cluster, rather than peak coordinates.

# Define top_dir
top_dir=$(<../top_dir_linux.txt)

# Define path to data
data_dir=${top_dir}/MRIanalyses/quickread/group_level_output/RSA_output

# Define output path for tables (create new directory if necessary)
output_dir=${data_dir}/1_tables_and_figures/cluster_tables
if [[ ! -d ${output_dir} ]]; then
	mkdir -p ${output_dir}
fi

# Also define a temporary directory in which to store cluster masks
cluster_dir=${data_dir}/1_tables_and_figures/cluster_tables/temp_cluster_dir
if [[ ! -d ${cluster_dir} ]]; then
	mkdir ${cluster_dir}
fi

# Define path to Harvard-Oxford anatomical masks
anat_mask_dir=${top_dir}/MRIanalyses/assets/Harvard_Oxford_ROIs

# Define list of anatomical masks
anat_masks=`ls $anat_mask_dir | grep nii | sed /.nii.gz/s///`

# Define contrasts and models
contrasts=(aloud-silent) #silent-aloud)
models=(\
		articulatory \
		# orthographic \
		# phonological \
		# semantic \
		# visual \
		  )

# Loop through contrasts
for contrast in ${contrasts[@]}; do
	for model in ${models[@]}; do

	echo ${contrast} ${model}

		# Define Bayes map. The filename will depend on whether we are looking at individual conditions or contrasts
		if [[ ${contrast} == *"-"* ]]; then
			bayes_map=${data_dir}/${model}_group_searchlight_output/bayes_map_${contrast}_${model}_thresh_masked_with_minuend
		else
			bayes_map=${data_dir}/${model}_group_searchlight_output/bayes_map_${contrast}_${model}_thresh
		fi

		# Define output files. One will be (temporary) raw cluster tables generated by cluster
		# the other will contain useful cluster information plus anatomical labels
		cluster_table_raw=${output_dir}/cluster_table_raw_${model}_${contrast}.csv
		cluster_table_clean=${output_dir}/cluster_table_${model}_${contrast}.csv

		# Ensure cluster_table_clean is empty
		> ${cluster_table_clean}

		# Supply column headings for cluster_table_clean
		echo "Cluster N,Mean BF,Cluster extent (mm^3),Max BF,x,y,z,Anatomical labels,COG label, NEW CE" >> ${cluster_table_clean}

		# Use fsl's cluster command to identify clusters (above a minimum spatial extent), generate a clutster table, and save two images to disk.
		# The first image indexes clusters by spatial extent (voxels are replaced with indices), the second is the original
		# map of bayes factors, with small clusters removed (useful for figures)

		# Define output images
		bayes_map_no_small_clusts=${bayes_map}_no_small_clusters

		cluster_index_map=${cluster_dir}/${model}_${contrast}_clusters

		# Define minimum cluster extent
		min_extent=20

		# Do the work. Note that the --thresh arguemnt must be included beRHcause it is mandatory, but we'll just
		# use --thresh=1 because these images have already been thresholded
		cluster --in=${bayes_map} --thresh=1 --minextent=${min_extent} --othresh=${bayes_map_no_small_clusts} \
				--mm --oindex=${cluster_index_map} > ${cluster_table_raw}


		# Determine how many clusters are present in cluster_index_map (if zero, skip)
		n_clusters=$( fslstats ${cluster_index_map} -R | awk '{print $2}' )

		# Round to nearest integer
		n_clusters=$( printf "%.0f" ${n_clusters} )

		if [[ ${n_clusters} == 0 ]]; then
			continue
		fi

		# Loop through clusters. For each cluster, we will:
		# 1. Identify anatomical label for center of gravity (COG)
		# 2. Compute the average BF across voxels
		# 3. Identify anatomical labels for any other structures containing voxels in this cluster
		for cluster_index in $( seq 1 ${n_clusters} ); do

			######################################
			# Isolate this cluster (necessary for subsequent steps)
			######################################

			# Create an empty list to store anatomical labels
			anat_labels=()

			# Threshold cluster_index_map to isolate this cluster, using fslmaths
			this_cluster=${cluster_dir}/${model}_${contrast}_cluster_${cluster_index}
			fslmaths ${cluster_index_map} -thr ${cluster_index} -uthr ${cluster_index} ${this_cluster}

			# Also mask the bayes map with this cluster
			this_cluster_bayes_map=${this_cluster}_bayes_map
			fslmaths ${bayes_map_no_small_clusts} -mas ${this_cluster} ${this_cluster_bayes_map}


			# NEW note to self - I think the n voxel problem is being caused by the cluster function (i.e., it's under-estimating cluster extent) .
			# We might try coutning number of nonzero voxels HERE, before we start loopoing through anatomical ROIs? 

			# Count number of non-zero voxels in the cluster
			cluster_extent=$(fslstats ${this_cluster} -V)

			######################################
			# Find anatomical label for center of gravity (COG)
			######################################

			# Pull the COG coordinates for this cluster from cluster_table_raw, and get the corresponding anatomical structure
			# using atlasquery
			cog_coord=$( awk " \$1 == \"${cluster_index}\" " ${cluster_table_raw} | awk -F " " '{print $7","$8","$9}' )

			# Round coordinates to nearest integer
			cog_coord=$(echo "$cog_coord" | awk -F',' -v OFS=',' '{for(i=1;i<=NF;i++) printf "%.0f%s", $i, (i<NF?OFS:ORS)}')

			# Use atlasquery to identify the corresponding structure (store output in a temporary txt file).

			# First try the Harvard-Oxford Cortical Atlas
			atlasquery -a "Harvard-Oxford Cortical Structural Atlas" -c ${cog_coord} > ${cluster_dir}/temp.txt

			# Read the label from the temporary txt file
			read -r cog_label < ${cluster_dir}/temp.txt

			# If no label is found, try the Subcortical Atlas. If the Subcortical Atlas also returns no label, we will
			# skip this cluster (since we are not interested in clusters outside the atlas)
			if [[ ${cog_label} == *"No label found!"* ]]; then
				atlasquery -a "Harvard-Oxford Subcortical Structural Atlas" -c ${cog_coord} > ${cluster_dir}/temp.txt

				read -r cog_label < ${cluster_dir}/temp.txt

				# Check the (updated) cog label
				if [[ ${cog_label} == *"No label found!"* ]]; then

					continue

					# 	# If we wanted to remove this cluster from the no_small_clusts image, we could use an inverse binary mask...
					# 	# cluster_mask_for_removal=${cluster_dir}/remove_cluster_mask
					# 	# fslmaths ${this_cluster} -binv ${cluster_mask_for_removal}
					# 	# fslmaths ${bayes_map_no_small_clusts} -mas ${cluster_mask_for_removal} ${bayes_map_no_small_clusts}

					# 	# I've left this step out in the interests of transparent results (figures), but it's potentially useful
				fi
			fi

			# Remove leading junk text from label
			cog_label=$(echo "${cog_label}" | sed 's/<b>Harvard-Oxford Cortical Structural Atlas<\/b><br>//g')
			cog_label=$(echo "${cog_label}" | sed 's/<b>Harvard-Oxford Subcortical Structural Atlas<\/b><br>//g')

			# Atlasquery will often identify multiple structures. Each structure is preceded by a [value]% sign. Therefore,
			# If the label contains 2 or more % signs, subset everything before the second [value]% sign (i.e., keep the most
			# probable structure)
			if [[ $(grep -o "%" <<< "${cog_label}" | wc -l) -ge 2 ]]; then
				cog_label=$(echo "${cog_label}" | awk -F "%" '{print $1 "%" $2}')
			fi

			# Remove trailing ", [number]" from label
			cog_label=$(echo "${cog_label}" | sed 's/, [0-9]*//g')

			# Remove leading [number]% from label
			cog_label=$(echo "${cog_label}" | sed 's/[0-9]*% //g')

			# Replace spaces with underscores
			cog_label=$(echo "${cog_label}" | sed 's/ /_/g')

			# The Subcortical atlas includes Left/Right labels, but the cortical atlas does not. 
			# Remove these to ensure consistency with cortical labels
			cog_label=${cog_label/"Right_"/""}
			cog_label=${cog_label/"Left_"/""}

			# If the first value of cog_coord (x) is negative, this is a left hemisphere cluster. Otherwise, it's right hemisphere
			cog_x=$( echo ${cog_coord} | awk -F "," '{print $1}' )

			if [[ $(echo "${cog_x} < 0" | bc) -eq 1 ]]; then
				hemi="LH"
			else
				hemi="RH"
			fi

			######################################
			# Compute mean BF for this cluster
			######################################

			# Compute the average of non-zero voxels in this_cluster_bayes_map, using fslstats, and assign to "mean_BF"
			mean_BF=$( fslstats ${this_cluster_bayes_map} -M )

			######################################
			# Find other anatomical labels for this cluster
			######################################
			# Loop through anatomical masks. We will apply each mask to this_cluster. If the masked image contains
			# any voxels > 0, we will append the anatomical label to a list (that will ultimately be appended to the
			# row for this cluster in the results table).

			# Loop through anatomical masks
			for anat_mask in ${anat_masks[@]}; do

				# Define path to this mask
				this_anat_mask=${anat_mask_dir}/${anat_mask}

				# Mask this_cluster with this_anat_mask
				this_cluster_masked=${this_cluster}_masked

				fslmaths ${this_cluster} -mas ${this_anat_mask} ${this_cluster_masked}

				# Determine whether this masked image contains any voxels > 0
				n_voxels=$( fslstats ${this_cluster_masked} -V | awk '{print $1}' )

				if [[ ${n_voxels} > 0 ]]; then

					# If so, append the anatomical label (and N voxels) to a list
					anat_labels+=("${anat_mask} (${n_voxels})")

				fi

			done # anat masks

			# Condense the list of anatomical labels into a single string, separated by + signs
			anat_labels=$( IFS=+ ; echo "${anat_labels[*]}" )

			# Subset the row of cluster_table_raw in which the first column contains this cluster index, with values in the row separated by commas
			this_cluster_row=$( awk " \$1 == \"${cluster_index}\" " ${cluster_table_raw} )

			# Subset columns 2-6 (cluster extent, local maxima, and xyz cog coordinates)
			this_cluster_row_subset=$( echo ${this_cluster_row} | awk -F " " '{print $2","$3","$7","$8","$9}' )

			# Replace spaces with commas
			this_cluster_row_subset=$( echo ${this_cluster_row_subset} | sed 's/ /,/g' )

			# Append cluster index, mean BF, subsetted columns, anatomical labels, and cog label (with hemi) to cluster_table_clean
			echo "${cluster_index},${mean_BF},${this_cluster_row_subset},${anat_labels},${cog_label}_${hemi}, ${cluster_extent}" >> ${cluster_table_clean}

		done # cluster_index

	done # models

done # contrasts

# Remove temporary cluster directory
rm -r ${cluster_dir}

# Remove raw cluster tables
rm ${output_dir}/cluster_table_raw_*.csv
